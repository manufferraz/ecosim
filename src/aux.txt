        // Tenho uma thread principal para a simulação que só acaba quando toda a simulação dentro do tempo especificado acabar
        // Ela recebe o pedido de update e dá cv e notify.all
        // Ela dorme quando todas não estiverem terminado
        // usar flags por info inteiros (current e desired count) se escolher notificar todas as threads
        // a cada interação deleta a barrier antiga e cria uma com new.  
        // Percorre o grid a cada interação. para cada posição que não é vazia cria thread para simular
        // todas tem que ser criadas primeiro para depois simular. Cria todas e não mexe na cv. Depois de todas criadas dá um notifyal. Dá para usar mutex tb ->
        // lock no mutex, cria threads e dá unlock no mutex
        // Threads adjacentes com detach
        // MUTEX : Protege os recursos (grid)
        // flag se posição já foi processada, não pode ter ação nela, o mutex não resolve isso
        // VARIÁVEL DE CONDIÇÃO : Interface manda req atualizar, a thread principal acorda as outras, simulam, e a variável de condição informa que simulou
        // Criar funções para cada tipo de entidade.
        // Verificar unidades de tempo para saber se morre ou continua em todas
        // Usar funções de ações aleatórias
        // Verificar se tá viva qundo der lock, salvar se está viva ou não no grid
        // Se for planta, espaço vazio pode ser crescimento. Cria thread adjacente em uma das direções, se for comida, a thread é derrubada
        // Se for herbívoro, comer acresenta energia, reproduzir e andar decresce energia, se for comida, a thread é derrubada
        // Se for carnívoro, comer acresenta energia, reproduzir e andar decresce energia.
        // Acabou a etapa de tempo (while), devolve a entity_grid